version: 2.1

.dockersetup: &dockersetup
  docker:
    - image: pennbbl/qsiprep_build:23.3.1
  working_directory: /src/qsiprep

runinstall: &runinstall
    name: Install qsiprep
    command: |
      VERSION=0+build
      if [[ -n "$CIRCLE_TAG" ]]; then
        VERSION="$CIRCLE_TAG"
      fi
      git checkout $CIRCLE_BRANCH
      echo "${VERSION}" > /src/qsiprep/qsiprep/VERSION
      echo "include qsiprep/VERSION" >> /src/qsiprep/MANIFEST.in
      pip install . --progress-bar off

      # Precaching fonts, set 'Agg' as default backend for matplotlib
      python -c "from matplotlib import font_manager"
      sed -i 's/\(backend *: \).*$/\1Agg/g' $( python -c "import matplotlib; print(matplotlib.matplotlib_fname())" )

      # Write the config file
      mkdir /root/.nipype
      CFG=/root/.nipype/nipype.cfg
      printf "[execution]\nstop_on_first_crash = true\n" > ${CFG}
      echo "poll_sleep_duration = 0.01" >> ${CFG}
      echo "hash_method = content" >> ${CFG}
      ln -s /home/qsiprep/.dipy /root/.dipy


jobs:

  build:
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall

  build_docs:
    environment:
      FSLOUTPUTTYPE: NIFTI
      NIPYPE_NO_ET: "1"
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Build documentation
          command: |
            conda install -y make
            pip install ".[doc]"
            make SHPINXOPTS="-W" -C docs html

  DSCSDSI:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Run DSCSDSI tests
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash DSCSDSI.sh

  DSDTI_nofmap:
    environment:
      CIRCLE_CPUS: 4
    resource_class: large
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Run DTI with no fieldmap
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash DSDTI_nofmap.sh

  DSDTI_synfmap:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Run DTI with SyN SDC
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash DSDTI_synfmap.sh

  DSDTI_TOPUP:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Run DTI with TOPUP/Eddy
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash DSDTI_TOPUP.sh

  DRBUDDI_SHORELine_EPI:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Run SHORELine with epi fmaps and DRBUDDI
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash DRBUDDI_SHORELine_epi.sh

  DRBUDDI_eddy_rpe_series:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Run Eddy with rpe series fmaps and DRBUDDI
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash DRBUDDI_eddy_rpe_series.sh

  IntramodalTemplate:
    resource_class: large
    <<: *dockersetup
    environment:
      CIRCLE_CPUS: 4
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Test the intramodal template workflow
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash IntramodalTemplate.sh

  MultiT1w:
    resource_class: large
    <<: *dockersetup
    environment:
      CIRCLE_CPUS: 4
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Test the mri robust template for T1w images
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash MultiT1w.sh

  Recon_3Tissue:
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Test the 3Tissue recon workflows
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash 3TissueReconTests.sh

  Recon_MRtrix3:
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Test the CSD recon workflows
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash Mrtrix3ReconTests.sh

  Recon_DIPY:
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Test the DIPY recon workflows
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash DIPYReconTests.sh

  Recon_PYAFQ:
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Test the PYAFQ standalone recon workflow
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash PyAFQReconTests.sh

  Recon_PYAFQExternalTrk:
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Test the PYAFQ workflow with mrtrix tractography
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash PyAFQReconExternalTrk.sh

  Recon_AMICO:
    <<: *dockersetup
    resource_class: medium+
    environment:
      CIRCLE_CPUS: 3
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Test the DIPY recon workflows
          command: |
            cd .circleci
            bash AMICOReconTests.sh

  deployable:
    resource_class: small
    docker:
      - image: busybox:latest
    steps:
      - run: echo Deploying!

  build_and_deploy:
    environment:
      TZ: "/usr/share/zoneinfo/America/New_York"
    docker:
      - image: cimg/base:2020.09
    working_directory: /tmp/src/qsiprep_build
    steps:
      - checkout
      - setup_remote_docker:
         version: 19.03.13
         docker_layer_caching: true
      - run:
          name: Build Docker image
          no_output_timeout: 3h
          command: |
            # Get version, update files.
            THISVERSION=$( python3 get_version.py )
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            sed -i -E "s/(__version__ = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" wrapper/qsiprep_docker.py
            sed -i -E "s/(var version = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" docs/citing.rst
            sed -i "s/title = {qsiprep}/title = {qsiprep ${CIRCLE_TAG:-$THISVERSION}}/" qsiprep/data/boilerplate.bib
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=pennbbl/qsiprep \
                --rm=false \
                -t pennbbl/qsiprep:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag pennbbl/qsiprep pennbbl/qsiprep:unstable
              docker push pennbbl/qsiprep:unstable
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push pennbbl/qsiprep:latest
                docker tag pennbbl/qsiprep pennbbl/qsiprep:$CIRCLE_TAG
                docker push pennbbl/qsiprep:$CIRCLE_TAG
              fi
            fi

  test_deploy_pypi:
    docker:
      - image: cimg/python:3.8.10
    working_directory: /tmp/src/qsiprep
    steps:
      - checkout
      - run:
          name: Build qsiprep
          command: |
            sudo apt-get update
            sudo apt-get install -y libblas-dev liblapack-dev gfortran
            pip install --user twine  # For use in checking distributions
            pip install --user --upgrade importlib-metadata
            THISVERSION=$( python3 get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            virtualenv --python=python build
            source build/bin/activate
            pip install --upgrade "setuptools<65.6.0" "pip>=19.1" numpy
            echo "${CIRCLE_TAG:-$THISVERSION}" > qsiprep/VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - store_artifacts:
          path: /tmp/src/qsiprep/dist
      - run:
          name: Check sdist distribution
          command: |
            sudo apt-get install -y libblas-dev liblapack-dev gfortran
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/qsiprep*.tar.gz
            virtualenv --python=python sdist
            source sdist/bin/activate
            pip install --progress-bar off --upgrade "setuptools<65.6.0" "pip>=19.1" numpy
            pip install dist/qsiprep*.tar.gz
            which qsiprep | grep sdist\\/bin
            INSTALLED_VERSION=$(qsiprep --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"qsiprep v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - run:
          name: Check wheel distribution
          command: |
            sudo apt-get install -y libblas-dev liblapack-dev gfortran
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/qsiprep*.whl
            virtualenv --python=python wheel
            source wheel/bin/activate
            pip install dist/qsiprep*.whl
            which qsiprep | grep wheel\\/bin
            INSTALLED_VERSION=$(qsiprep --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"qsiprep v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - run:
          name: Build qsiprep-container
          command: |
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            cd wrapper
            virtualenv --python=python build
            source build/bin/activate
            pip install --upgrade "pip>=19.1"
            sed -i -E "s/(__version__ = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" qsiprep_docker.py
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - store_artifacts:
          path: /tmp/src/qsiprep/wrapper/dist

  deploy_pypi:
    docker:
      - image: circleci/python:3.8.10
    working_directory: /tmp/src/qsiprep
    steps:
      - checkout
      - run:
          name: Build qsiprep
          command: |
            THISVERSION=$( python get_version.py )
            virtualenv --python=python build
            source build/bin/activate
            pip install --upgrade "pip>=19.1" numpy
            sudo apt-get install -y libblas-dev liblapack-dev gfortran
            echo "${CIRCLE_TAG:-$THISVERSION}" > qsiprep/VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - run:
          name: Build qsiprep-container
          command: |
            THISVERSION=$( python get_version.py )
            cd wrapper
            virtualenv --python=python build
            source build/bin/activate
            pip install --upgrade "pip>=19.1"
            sudo apt-get install -y libblas-dev liblapack-dev gfortran
            sed -i -E "s/(__version__ = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" qsiprep_docker.py
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - run:
          name: Upload packages to PyPI
          command: |
            pip install --user twine
            pip install --user --upgrade importlib-metadata
            twine upload dist/qsiprep*gz wrapper/dist/qsiprep*


workflows:
  version: 2
  build_test_deploy:
    jobs:

      - build:
          filters:
            tags:
              only: /.*/

      - build_docs:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - test_deploy_pypi:
          filters:
            tags:
              only: /.*/

      - DSCSDSI:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DRBUDDI_SHORELine_EPI:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DRBUDDI_eddy_rpe_series:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DSDTI_nofmap:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DSDTI_synfmap:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DSDTI_TOPUP:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - IntramodalTemplate:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - MultiT1w:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - Recon_3Tissue:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - Recon_MRtrix3:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - Recon_DIPY:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - Recon_AMICO:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - Recon_PYAFQ:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - Recon_PYAFQExternalTrk:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - deployable:
          requires:
            - build_docs
            - test_deploy_pypi
            - DSCSDSI
            - DSDTI_nofmap
            - DSDTI_synfmap
            - DSDTI_TOPUP
            - DRBUDDI_SHORELine_EPI
            - DRBUDDI_eddy_rpe_series
            - IntramodalTemplate
            - MultiT1w
            - Recon_3Tissue
            - Recon_MRtrix3
            - Recon_DIPY
            - Recon_AMICO
            - Recon_PYAFQ
            - Recon_PYAFQExternalTrk
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - build_and_deploy:
          requires:
            - deployable
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_pypi:
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/