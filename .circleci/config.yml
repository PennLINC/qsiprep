version: 2.1
orbs:
  codecov: codecov/codecov@3.2.4

.dockersetup: &dockersetup
  docker:
    - image: pennbbl/qsiprep_build:24.4.29
  working_directory: /src/qsiprep

runinstall: &runinstall
    name: Install qsiprep
    command: |
      VERSION=0+build
      if [[ -n "$CIRCLE_TAG" ]]; then
        VERSION="$CIRCLE_TAG"
      fi
      git checkout $CIRCLE_BRANCH
      echo "${VERSION}" > /src/qsiprep/qsiprep/VERSION
      echo "include qsiprep/VERSION" >> /src/qsiprep/MANIFEST.in
      pip install .[tests] --progress-bar off

      # Precaching fonts, set 'Agg' as default backend for matplotlib
      python -c "from matplotlib import font_manager"
      sed -i 's/\(backend *: \).*$/\1Agg/g' $( python -c "import matplotlib; print(matplotlib.matplotlib_fname())" )

      # Write the config file
      mkdir /root/.nipype
      CFG=/root/.nipype/nipype.cfg
      printf "[execution]\nstop_on_first_crash = true\n" > ${CFG}
      echo "poll_sleep_duration = 0.01" >> ${CFG}
      echo "hash_method = content" >> ${CFG}
      ln -s /home/qsiprep/.dipy /root/.dipy


jobs:

  build:
    <<: *dockersetup
    steps:
      - checkout
      - run: *runinstall

  download_singleshell_output:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: singleshell_output-01
      - run: *runinstall
      - run:
          name: Download singleshell_output test data
          command: |
            cd /src/qsiprep/.circleci
            python get_data.py $PWD/data singleshell_output
      - save_cache:
          key: singleshell_output-01
          paths:
            - /src/qsiprep/.circleci/data/singleshell_output

  download_multishell_output:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: multishell_output-01
      - run: *runinstall
      - run:
          name: Download multishell_output test data
          command: |
            cd /src/qsiprep/.circleci
            python get_data.py $PWD/data multishell_output
      - save_cache:
          key: multishell_output-01
          paths:
            - /src/qsiprep/.circleci/data/multishell_output

  download_drbuddi_rpe_series:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: drbuddi_rpe_series-01
      - run: *runinstall
      - run:
          name: Download drbuddi_rpe_series test data
          command: |
            cd /src/qsiprep/.circleci
            python get_data.py $PWD/data drbuddi_rpe_series
      - save_cache:
          key: drbuddi_rpe_series-01
          paths:
            - /src/qsiprep/.circleci/data/drbuddi_rpe_series

  download_drbuddi_epi:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: drbuddi_epi-01
      - run: *runinstall
      - run:
          name: Download drbuddi_epi test data
          command: |
            cd /src/qsiprep/.circleci
            python get_data.py $PWD/data drbuddi_epi
      - save_cache:
          key: drbuddi_epi-01
          paths:
            - /src/qsiprep/.circleci/data/drbuddi_epi

  download_DSDTI:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: DSDTI-01
      - run: *runinstall
      - run:
          name: Download DSDTI test data
          command: |
            cd /src/qsiprep/.circleci
            python get_data.py $PWD/data DSDTI
      - save_cache:
          key: DSDTI-01
          paths:
            - /src/qsiprep/.circleci/data/DSDTI

  download_DSCSDSI:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: DSCSDSI-01
      - run: *runinstall
      - run:
          name: Download DSCSDSI test data
          command: |
            cd /src/qsiprep/.circleci
            python get_data.py $PWD/data DSCSDSI
      - save_cache:
          key: DSCSDSI-01
          paths:
            - /src/qsiprep/.circleci/data/DSCSDSI

  download_twoses:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: twoses-01
      - run: *runinstall
      - run:
          name: Download twoses test data
          command: |
            cd /src/qsiprep/.circleci
            python get_data.py $PWD/data twoses
      - save_cache:
          key: twoses-01
          paths:
            - /src/qsiprep/.circleci/data/twoses

  DSCSDSI:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: DSCSDSI-01
      - run: *runinstall
      - run:
          name: Run TENSORLine with epi fmaps and DRBUDDI
          no_output_timeout: 2h
          command: |
            pytest -rP -o log_cli=true -m "dscsdsi" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.dscsdsi
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.dscsdsi
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/dscsdsi/

  DSDTI_nofmap:
    environment:
      CIRCLE_CPUS: 4
    resource_class: large
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: DSDTI-01
      - run: *runinstall
      - run:
          name: Run DTI with no fieldmap
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "dsdti_nofmap" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.dsdti_nofmap
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.dsdti_nofmap
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/dsdti_nofmap/

  DSDTI_synfmap:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: DSDTI-01
      - run: *runinstall
      - run:
          name: Run DTI with SyN SDC
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "dsdti_synfmap" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.dsdti_synfmap
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.dsdti_synfmap
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/dsdti_synfmap/

  DSDTI_TOPUP:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: DSDTI-01
      - run: *runinstall
      - run:
          name: Run DTI with TOPUP/Eddy
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "dsdti_topup" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.dsdti_topup
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.dsdti_topup
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/dsdti_topup/

  DRBUDDI_TENSORLine_EPI:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: DSDTI-01
      - run: *runinstall
      - run:
          name: Run TENSORLine with epi fmaps and DRBUDDI
          no_output_timeout: 2h
          command: |
            pytest -rP -o log_cli=true -m "drbuddi_tensorline_epi" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.drbuddi_tensorline_epi
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.drbuddi_tensorline_epi
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/drbuddi_tensorline_epi/

  DRBUDDI_SHORELine_EPI:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: drbuddi_epi-01
      - run: *runinstall
      - run:
          name: Run SHORELine with epi fmaps and DRBUDDI
          no_output_timeout: 2h
          command: |
            pytest -rP -o log_cli=true -m "drbuddi_shoreline_epi" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.drbuddi_shoreline_epi
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.drbuddi_shoreline_epi
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/drbuddi_shoreline_epi/

  DRBUDDI_eddy_rpe_series:
    resource_class: large
    environment:
      CIRCLE_CPUS: 4
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: drbuddi_rpe_series-01
      - run: *runinstall
      - run:
          name: Run Eddy with rpe series fmaps and DRBUDDI
          no_output_timeout: 3h
          command: |
            pytest -rP -o log_cli=true -m "drbuddi_rpe" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.drbuddi_rpe
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.drbuddi_rpe
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/drbuddi_rpe/

  IntramodalTemplate:
    resource_class: large
    <<: *dockersetup
    environment:
      CIRCLE_CPUS: 4
    steps:
      - checkout
      - run: *runinstall
      - run:
          name: Test the intramodal template workflow
          no_output_timeout: 2h
          command: |
            cd .circleci
            bash IntramodalTemplate.sh

  MultiT1w:
    resource_class: large
    <<: *dockersetup
    environment:
      CIRCLE_CPUS: 4
    steps:
      - checkout
      - restore_cache:
          key: twoses-01
      - run: *runinstall
      - run:
          name: Test the mri robust template for T1w images
          no_output_timeout: 1h
          command: |
            cd .circleci
            bash MultiT1w.sh

  Recon_3Tissue_Singleshell_ACT:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: singleshell_output-01
      - run: *runinstall
      - run:
          name: Test the 3Tissue recon workflows
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "mrtrix_singleshell_ss3t_act" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.mrtrix_singleshell_ss3t_act
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.mrtrix_singleshell_ss3t_act
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/mrtrix_singleshell_ss3t_act/

  Recon_3Tissue_Singleshell_NoACT:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: singleshell_output-01
      - run: *runinstall
      - run:
          name: Test the 3Tissue recon workflows
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "mrtrix_singleshell_ss3t_noact" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.mrtrix_singleshell_ss3t_noact
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.mrtrix_singleshell_ss3t_noact
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/mrtrix_singleshell_ss3t_noact/

  Recon_MRtrix3:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: multishell_output-01
      - run: *runinstall
      - run:
          name: Test the CSD recon workflows
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "mrtrix3_recon" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.mrtrix3_recon
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.mrtrix3_recon
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/mrtrix3_recon/

  Recon_AutoTrack:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: multishell_output-01
      - run: *runinstall
      - run:
          name: Test the AutoTrack workflow
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "autotrack" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.autotrack
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.autotrack
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/autotrack/

  Recon_Tortoise:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: multishell_output-01
      - run: *runinstall
      - run:
          name: Test the TORTOISE recon workflow
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "tortoise_recon" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.tortoise_recon
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.tortoise_recon
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/tortoise_recon/

  Recon_DIPY_MAPMRI:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: multishell_output-01
      - run: *runinstall
      - run:
          name: Test the DIPY recon workflows
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "dipy_mapmri" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.dipy_mapmri
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.dipy_mapmri
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/dipy_mapmri/

  Recon_DIPY_DKI:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: multishell_output-01
      - run: *runinstall
      - run:
          name: Test the DIPY recon workflows
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "dipy_dki" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.dipy_dki
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.dipy_dki
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/dipy_dki/

  Recon_PYAFQ:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: multishell_output-01
      - run: *runinstall
      - run:
          name: Test the PYAFQ standalone recon workflow
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "pyafq_recon_full" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.pyafq_recon_full
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.pyafq_recon_full
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/pyafq_recon_full/

  Recon_PYAFQExternalTrk:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: multishell_output-01
      - run: *runinstall
      - run:
          name: Test the PYAFQ workflow with mrtrix tractography
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "pyafq_recon_external_trk" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.pyafq_recon_external_trk
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.pyafq_recon_external_trk
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/pyafq_recon_external_trk/

  Recon_ScalarMap:
    <<: *dockersetup
    steps:
      - checkout
      - restore_cache:
          key: multishell_output-01
      - run: *runinstall
      - run:
          name: Test scalar_mapping workflow
          no_output_timeout: 1h
          command: |
            pytest -rP -o log_cli=true -m "scalar_mapper" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.scalar_mapper
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.scalar_mapper
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/scalar_mapper/

  Recon_AMICO:
    <<: *dockersetup
    resource_class: medium+
    environment:
      CIRCLE_CPUS: 3
    steps:
      - checkout
      - restore_cache:
          key: singleshell_output-01
      - run: *runinstall
      - run:
          name: Test the DIPY recon workflows
          command: |
            pytest -rP -o log_cli=true -m "amico_noddi" --cov-config=/src/qsiprep/pyproject.toml --cov-append --cov-report term-missing --cov=qsiprep --data_dir=/src/qsiprep/.circleci/data --output_dir=/src/qsiprep/.circleci/out --working_dir=/src/qsiprep/.circleci/work qsiprep
            mkdir /src/coverage
            mv /src/qsiprep/.coverage /src/coverage/.coverage.amico_noddi
            # remove nifti files before uploading artifacts
            find /src/qsiprep/.circleci/out/ -name "*.nii.gz" -type f -delete
            find /src/qsiprep/.circleci/out/ -name "*.fib.gz" -type f -delete
      - persist_to_workspace:
          root: /src/coverage/
          paths:
            - .coverage.amico_noddi
      - store_artifacts:
          path: /src/qsiprep/.circleci/out/amico_noddi/

  merge_coverage:
    <<: *dockersetup
    steps:
      - checkout
      - attach_workspace:
          at: /src/coverage
      - run: *runinstall
      - run:
          name: Merge coverage files
          command: |
            cd /src/coverage/
            coverage combine
            coverage xml
      - store_artifacts:
          path: /src/coverage
      - codecov/upload:
          file: /src/coverage/coverage.xml

  deployable:
    resource_class: small
    docker:
      - image: busybox:latest
    steps:
      - run: echo Deploying!

  build_and_deploy:
    environment:
      TZ: "/usr/share/zoneinfo/America/New_York"
    docker:
      - image: cimg/base:2020.09
    working_directory: /tmp/src/qsiprep_build
    steps:
      - checkout
      - setup_remote_docker:
         version: docker24
         docker_layer_caching: true
      - run:
          name: Build Docker image
          no_output_timeout: 3h
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip
            pip install hatch
            # Get version, update files.
            THISVERSION=$(hatch version)
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            sed -i -E "s/(__version__ = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" wrapper/qsiprep_container/qsiprep_docker.py
            sed -i -E "s/(var version = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" docs/citing.rst
            sed -i "s/title = {qsiprep}/title = {qsiprep ${CIRCLE_TAG:-$THISVERSION}}/" qsiprep/data/boilerplate.bib
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build \
                --cache-from=pennbbl/qsiprep \
                --rm=false \
                -t pennbbl/qsiprep:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag pennbbl/qsiprep pennbbl/qsiprep:unstable
              docker push pennbbl/qsiprep:unstable
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push pennbbl/qsiprep:latest
                docker tag pennbbl/qsiprep pennbbl/qsiprep:$CIRCLE_TAG
                docker push pennbbl/qsiprep:$CIRCLE_TAG
              fi
            fi

workflows:
  version: 2
  build_test_deploy:
    jobs:

      - build:
          filters:
            tags:
              only: /.*/

      - download_singleshell_output:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - download_multishell_output:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - download_drbuddi_rpe_series:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - download_drbuddi_epi:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - download_DSDTI:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - download_DSCSDSI:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - download_twoses:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - DSCSDSI:
          requires:
            - download_DSCSDSI
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DRBUDDI_SHORELine_EPI:
          requires:
            - download_drbuddi_epi
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DRBUDDI_eddy_rpe_series:
          requires:
            - download_drbuddi_rpe_series
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DRBUDDI_TENSORLine_EPI:
          requires:
            - download_DSDTI
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DSDTI_nofmap:
          requires:
            - download_DSDTI
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DSDTI_synfmap:
          requires:
            - download_DSDTI
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - DSDTI_TOPUP:
          requires:
            - download_DSDTI
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - IntramodalTemplate:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - MultiT1w:
          requires:
            - download_twoses
          filters:
            branches:
              ignore:
                - /recon\/.*/
            tags:
              only: /.*/

      - Recon_3Tissue_Singleshell_ACT:
          requires:
            - download_singleshell_output
          filters:
            tags:
              only: /.*/

      - Recon_3Tissue_Singleshell_NoACT:
          requires:
            - download_singleshell_output
          filters:
            tags:
              only: /.*/

      - Recon_MRtrix3:
          requires:
            - download_multishell_output
          filters:
            tags:
              only: /.*/

      - Recon_AutoTrack:
          requires:
            - download_multishell_output
          filters:
            tags:
              only: /.*/

      - Recon_Tortoise:
          requires:
            - download_multishell_output
          filters:
            tags:
              only: /.*/

      - Recon_DIPY_MAPMRI:
          requires:
            - download_multishell_output
          filters:
            tags:
              only: /.*/

      - Recon_DIPY_DKI:
          requires:
            - download_multishell_output
          filters:
            tags:
              only: /.*/

      - Recon_AMICO:
          requires:
            - download_singleshell_output
          filters:
            tags:
              only: /.*/

      - Recon_PYAFQ:
          requires:
            - download_multishell_output
          filters:
            tags:
              only: /.*/

      - Recon_PYAFQExternalTrk:
          requires:
            - download_multishell_output
          filters:
            tags:
              only: /.*/

      - Recon_ScalarMap:
          requires:
            - download_multishell_output
          filters:
            tags:
              only: /.*/

      - merge_coverage:
          requires:
            - DSCSDSI
            - DSDTI_nofmap
            - DSDTI_synfmap
            - DSDTI_TOPUP
            - DRBUDDI_SHORELine_EPI
            - DRBUDDI_eddy_rpe_series
            - DRBUDDI_TENSORLine_EPI
            - IntramodalTemplate
            - MultiT1w
            - Recon_3Tissue_Singleshell_ACT
            - Recon_3Tissue_Singleshell_NoACT
            - Recon_MRtrix3
            - Recon_AutoTrack
            - Recon_Tortoise
            - Recon_DIPY_MAPMRI
            - Recon_DIPY_DKI
            - Recon_AMICO
            - Recon_PYAFQ
            - Recon_PYAFQExternalTrk
            - Recon_ScalarMap
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
            tags:
              only: /.*/

      - deployable:
          requires:
            - DSCSDSI
            - DSDTI_nofmap
            - DSDTI_synfmap
            - DSDTI_TOPUP
            - DRBUDDI_SHORELine_EPI
            - DRBUDDI_eddy_rpe_series
            - DRBUDDI_TENSORLine_EPI
            - IntramodalTemplate
            - MultiT1w
            - Recon_3Tissue_Singleshell_ACT
            - Recon_3Tissue_Singleshell_NoACT
            - Recon_MRtrix3
            - Recon_AutoTrack
            - Recon_Tortoise
            - Recon_DIPY_MAPMRI
            - Recon_DIPY_DKI
            - Recon_AMICO
            - Recon_PYAFQ
            - Recon_PYAFQExternalTrk
            - Recon_ScalarMap
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - build_and_deploy:
          requires:
            - deployable
          filters:
            branches:
              only: master
            tags:
              only: /.*/
