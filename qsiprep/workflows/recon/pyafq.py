"""
PyAFQ tractometry and visualization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: init_pyafq_wf

"""
import nipype.pipeline.engine as pe
import nipype.interfaces.utility as niu
import logging
from qsiprep.interfaces.pyafq import PyAFQRecon
from .interchange import recon_workflow_input_fields
from ...interfaces.bids import ReconDerivativesDataSink
LOGGER = logging.getLogger('nipype.workflow')


def init_pyafq_wf(name="afq", output_suffix="", params={}):
    """Run PyAFQ on some qsiprep outputs

    Inputs

        *qsiprep outputs*

    Outputs
        profiles_csv
            CSV file containing the tract profiles generated by pyAFQ.

    """
    inputnode = pe.Node(niu.IdentityInterface(
        fields=recon_workflow_input_fields + ['trk_file']),
        name="inputnode")
    outputnode = pe.Node(
        niu.IdentityInterface(fields=['profiles_csv']),
        name="outputnode")

    run_afq = pe.Node(PyAFQRecon(**params), name='run_afq')
    workflow = pe.Workflow(name=name)
    workflow.connect([
        (inputnode, run_afq, [
            ('dwi_file', 'dwi_file'),
            ('bval_file', 'bval_file'),
            ('bvec_file', 'bvec_file'),
            ('dwi_mask', 'mask_file'),
            ('fs_to_qsiprep_transform_itk', 'itk_file'),
            ('trk_file', 'trk_file')]),
        (run_afq, outputnode, [('profiles_csv', 'profiles_csv')])
    ])
    if output_suffix:
        # Save the output in the outputs directory
        ds_afq = pe.Node(
            ReconDerivativesDataSink(
                suffix=output_suffix,
                extension='.csv'),
            name='ds_' + name + '_profiles',
            run_without_submitting=True)
        workflow.connect(run_afq, 'profiles_csv', ds_afq, 'in_file')
    return workflow
